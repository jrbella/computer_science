from linked_list import Node, LinkedList
from blossom_lib import flower_definitions 

class HashMap:

  def __init__(self, size):
    self.array_size = size
    self.array = [LinkedList() for item in range(size)]

  def hash(self, key):
    """
    algorithm to calculate hash code
    returns the hash code
    """
    key_bytes = key.encode()
    hash_code = sum(key_bytes)
    return hash_code
     
  def compress(self, hash_code):
    """
    guarentees the index generated by the compress
    will never exceed the size of the array
    """
    return hash_code % self.array_size
  
  def assign(self, key, value):
    """
    converts a key into an array index
    """
    array_index = self.compress(self.hash(key))
    payload = Node([key, value])
    # retreive the list at the index of array_index
    list_at_array = self.array[array_index]

    for item in list_at_array:
      if key == item[0]:
        item[1] = value
        return
      # insert requires a position array.insert(i, x)
    list_at_array.insert(payload)


         
  def retrieve(self, key):
    """
    takes a key and returns its value on the hash map
    """
    array_index = self.compress(self.hash(key))
    # retreives a linked list
    list_at_index = self.array[array_index]

    for item in list_at_index:
      # if we found our key return its value
      if key == item[0]:
        return item[1]
    return None

blossom = HashMap(len(flower_definitions))

for flower in flower_definitions:
  blossom.assign(flower[0], flower[1])

print(blossom.retrieve('daisy'))


    